<svg x="@Offset" y="@VerticalNotePosition()" width="@(LineSpacing * 4)" height="@(LineSpacing * 8)">
    @if (Note.Duration.CommonTimeBeatLength < 4)
    {
        <NoteStemComponent Transform="@StemTransform()" Height="@(LineSpacing * 3)" Width="@(LineSpacing / 5)" />
    }
    @if (Note.Beams.Any())
    {
        // BUILD BEAMS
    }
    else if (Note.Duration.Flags > 0)
    {
        for (var i = 0; i < Note.Duration.Flags; i++)
        {
            <FlagComponent Transform="@FlagTransform(i)" />
        }
    }
    <NoteHeadComponent Transform="@HeadTransform()"
                       NoteHead="GetNoteHead()" />
</svg>

@code {
    [Parameter]
    public Note Note { get; set; }

    [Parameter]
    public double Offset { get; set; }

    [Parameter]
    public double LineSpacing { get; set; }

    public string StemTransform()
    {
        if (Note.Pitch.HasValue && Note.Pitch.Value.StaffLocation < 6)
        {
            return $"translate({LineSpacing * 1.43}px, 0)";
        }
        var stemWidth = LineSpacing / 5;
        stemWidth = stemWidth > 1 ? stemWidth : 1;
        return $"translate({stemWidth * 1.2}px, {LineSpacing * 3.1}px)";
    }

    public string HeadTransform()
    {
        return $"translate(0, {LineSpacing * 2.85}px) scale({0.009 * LineSpacing}, {0.009 * LineSpacing})";
    }

    public string FlagTransform(int index)
    {
        var flagOffset = LineSpacing * index;
        if (Note.Pitch.HasValue && Note.Pitch.Value.StaffLocation < 6)
        {
            // right-side up
            return $"translate(-{LineSpacing * 9.3}px, -{LineSpacing * 9.4 - flagOffset}px) scale({0.04 * LineSpacing}, {0.04 * LineSpacing})";
        }
        // up-side down
        return $"translate(-{LineSpacing * 10.5}px, {LineSpacing * 15.58 - flagOffset}px) scale({0.04 * LineSpacing}, -{0.04 * LineSpacing})";
    }

    public double VerticalNotePosition()
    {
        var pitchValue = Note.Pitch.HasValue ? Note.Pitch.Value : Pitches.B4;
        return (LineSpacing * 5.9) - (pitchValue.StaffLocation * (LineSpacing / 2));
    }

    public NoteHead GetNoteHead()
    {
        if (Note.Duration.CommonTimeBeatLength >= 2.0)
        {
            return new NoteHead(NoteHeadShape.OpenOval);
        }

        return new NoteHead(NoteHeadShape.ClosedOval);
    }
}
